/******************************************************************************
Frederik van der Velpen 01/09/2017
Function to return batch status of all expected microflows
*******************************************************************************/
create or replace FUNCTION DQ_USER.fn_get_batch_status_session
RETURN batch_status_type_table
PIPELINED IS
out_rec      batch_status_type := batch_status_type (NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);
BEGIN
FOR c1 IN
  ( SELECT batch_task_session_id FROM ( SELECT batch_task_session_id, ROW_NUMBER() OVER (PARTITION BY batch_task_session_id ORDER BY batch_task_session_id) AS cnt FROM T_BATCH_TASK_STATUS) where cnt = 1 )
LOOP
   FOR c2 IN
    (
    WITH
    bs AS (
    SELECT
          BATCH_TASK_USE_CASE_ID,
          BATCH_TASK_SESSION_ID,
          MAX(BATCH_TASK_PROCESS_ID) AS LATEST_PROCESS_ID,
          MAX(DMP_ERROR_ACTIVE_INDICATOR) KEEP (DENSE_RANK FIRST ORDER BY DMP_ERROR_ACTIVE_INDICATOR DESC NULLS FIRST) AS DMP_ERROR_ACTIVE_INDICATOR,
          BATCH_TASK_APTITUDE_PROJECT,
          BATCH_TASK_APTITUDE_MICROFLOW,
          MAX(CASE WHEN BATCH_TASK_STATUS = 'E' THEN '1'
                   WHEN BATCH_TASK_STATUS = 'R' THEN '2'
                   WHEN BATCH_TASK_STATUS = 'C' THEN '3'
              END) AS STATUS_HIER,
          MAX(CASE WHEN BATCH_TASK_STATUS = 'E' AND DMP_ERROR_ACTIVE_INDICATOR = 'A' THEN '0'
                   WHEN BATCH_TASK_STATUS = 'R' THEN '1'
                   WHEN BATCH_TASK_STATUS = 'E' AND DMP_ERROR_ACTIVE_INDICATOR <> 'A' THEN '2'
                   WHEN BATCH_TASK_STATUS = 'C' THEN '3'
              END) AS ACTIVE_HIER,
          MAX(BATCH_TASK_START_TIMESTAMP) AS BATCH_TASK_START_TIMESTAMP,
          MAX(BATCH_TASK_END_TIMESTAMP) KEEP (DENSE_RANK FIRST ORDER BY BATCH_TASK_END_TIMESTAMP DESC NULLS FIRST) AS BATCH_TASK_END_TIMESTAMP
    FROM T_BATCH_TASK_STATUS
    WHERE BATCH_TASK_SESSION_ID = c1.BATCH_TASK_SESSION_ID
    GROUP BY
            BATCH_TASK_USE_CASE_ID,
            BATCH_TASK_SESSION_ID,
            BATCH_TASK_APTITUDE_PROJECT,
            BATCH_TASK_APTITUDE_MICROFLOW
    ),
    inner AS (
    SELECT
           NVL(ug.USE_CASE_ID,bs.BATCH_TASK_USE_CASE_ID) AS USE_CASE_ID,
           LAST_VALUE(BS.BATCH_TASK_SESSION_ID IGNORE NULLS) OVER (PARTITION BY NVL(UG.USE_CASE_ID, BS.BATCH_TASK_USE_CASE_ID) ORDER BY NVL(UG.USE_CASE_ID, BS.BATCH_TASK_USE_CASE_ID) DESC ) AS BATCH_TASK_SESSION_ID,
           NVL(u.DESCRIPTION,bs.BATCH_TASK_APTITUDE_MICROFLOW) AS BATCH_GROUP,
           bs.BATCH_TASK_APTITUDE_MICROFLOW AS BATCH_TASK_APTITUDE_MICROFLOW,
           ug.DMP_ORDER,
           NVL(bs.STATUS_HIER,4) AS STATUS_HIER,
           NVL(ACTIVE_HIER,4) AS ACTIVE_HIER,
           MIN(bs.BATCH_TASK_START_TIMESTAMP) AS BATCH_TASK_START_TIMESTAMP,
           MAX(bs.BATCH_TASK_END_TIMESTAMP) KEEP (DENSE_RANK FIRST ORDER BY BATCH_TASK_END_TIMESTAMP DESC NULLS FIRST) AS BATCH_TASK_END_TIMESTAMP
    FROM bs
    FULL OUTER JOIN  T_DMP_USE_CASE_BATCH_GROUP ug
               ON  ug.USE_CASE_ID = bs.BATCH_TASK_USE_CASE_ID
               AND ug.APTITUDE_PROJECT = bs.BATCH_TASK_APTITUDE_PROJECT
               AND ug.MICROFLOW = bs.BATCH_TASK_APTITUDE_MICROFLOW
    LEFT OUTER JOIN T_DMP_USE_CASE_GROUP u
               ON  u.GROUP_ID = ug.GROUP_ID
    GROUP BY NVL(ug.USE_CASE_ID, bs.BATCH_TASK_USE_CASE_ID),
                    bs.BATCH_TASK_SESSION_ID,
                    DMP_ORDER,
                    NVL(u.DESCRIPTION, bs.BATCH_TASK_APTITUDE_MICROFLOW),
                    bs.BATCH_TASK_APTITUDE_MICROFLOW,
                    NVL(bs.STATUS_HIER,4),
                    ACTIVE_HIER
    )
    SELECT USE_CASE_ID,
              BATCH_TASK_SESSION_ID,
              BATCH_GROUP,
              BATCH_TASK_APTITUDE_MICROFLOW,
              MAX(DMP_ORDER) DMP_ORDER,
               CASE
                WHEN MIN(ACTIVE_HIER) = '0' THEN 'E'
                WHEN MIN(ACTIVE_HIER) = '1' THEN 'R'
                WHEN MIN(ACTIVE_HIER) = '2' THEN 'C'
                WHEN MIN(ACTIVE_HIER) = '3' THEN 'C'
                WHEN MIN(ACTIVE_HIER) = '4' THEN NULL
              END CURRENT_RUN_STATUS,
              CASE
                WHEN MIN(STATUS_HIER) = '1' THEN 'E'
                WHEN MIN(STATUS_HIER) = '2' THEN 'R'
                WHEN MIN(STATUS_HIER) = '3' THEN 'C'
                WHEN MIN(STATUS_HIER) = '4' THEN NULL
              END ORIGINAL_RUN_STATUS,
              MIN(BATCH_TASK_START_TIMESTAMP) AS BATCH_TASK_START_TIMESTAMP,
              MAX(BATCH_TASK_END_TIMESTAMP) KEEP (DENSE_RANK FIRST ORDER BY BATCH_TASK_END_TIMESTAMP DESC NULLS FIRST) AS BATCH_TASK_END_TIMESTAMP
         FROM inner
           WHERE BATCH_TASK_SESSION_ID IS NOT NULL
         GROUP BY USE_CASE_ID,
                  BATCH_TASK_SESSION_ID,
                  BATCH_GROUP,
                  BATCH_TASK_APTITUDE_MICROFLOW
    )
   LOOP
     out_rec.USE_CASE_ID                   := c2.USE_CASE_ID;
     out_rec.BATCH_TASK_SESSION_ID         := c2.BATCH_TASK_SESSION_ID;
     out_rec.BATCH_GROUP                   := c2.BATCH_GROUP;
     out_rec.BATCH_TASK_APTITUDE_MICROFLOW := c2.BATCH_TASK_APTITUDE_MICROFLOW;
     out_rec.DMP_ORDER                     := c2.DMP_ORDER;
     out_rec.CURRENT_RUN_STATUS            := c2.CURRENT_RUN_STATUS;
     out_rec.ORIGINAL_RUN_STATUS           := c2.ORIGINAL_RUN_STATUS;
     out_rec.BATCH_TASK_START_TIMESTAMP    := c2.BATCH_TASK_START_TIMESTAMP;
     out_rec.BATCH_TASK_END_TIMESTAMP      := c2.BATCH_TASK_END_TIMESTAMP;
     PIPE ROW(out_rec);
   END LOOP;
END LOOP;
RETURN;
END;
/